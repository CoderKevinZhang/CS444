--- noop-iosched.c      2016-04-01 12:12:21.957147746 -0700
+++ sstf-iosched.c      2016-04-27 15:24:33.059247738 -0700
@@ -1,6 +1,7 @@
  /*
- * elevator noop
+ * elevator sstf
  */
+
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
 #include <linux/bio.h>
@@ -8,117 +9,186 @@
 #include <linux/slab.h>
 #include <linux/init.h>

-struct noop_data {
-       struct list_head queue;
+#define FORWARD 1
+#define BACKWARD 0
+#define POS_MAX ULONG_MAX/2
+#define POS_MIN 0
+
+struct sstf_data {
+       struct list_head queue;
+       int cur_direction;
+       sector_t cur_position;
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
-                                struct request *next)
+static inline sector_t sstf_distance ( sector_t ittr, sector_t sst )
 {
-       list_del_init(&next->queuelist);
+       return abs(ittr - sst);
 }

-static int noop_dispatch(struct request_queue *q, int force)
+static void sstf_merged_requests(struct request_queue *q, struct request *rq, struct request *next)
 {
-       struct noop_data *nd = q->elevator->elevator_data;
+       list_del_init(&next -> queuelist);
+}

-       if (!list_empty(&nd->queue)) {
-               struct request *rq;
-               rq = list_entry(nd->queue.next, struct request, queuelist);
-               list_del_init(&rq->queuelist);
-               elv_dispatch_sort(q, rq);
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+       struct list_head *tmp_list_head;
+       struct sstf_data *nd = q -> elevator -> elevator_data;
+       sector_t sst_sect;
+       sector_t ittr_sect;
+               struct request *sst;
+        struct request *begin;
+       struct request *ittr;
+
+       sst_sect = ULONG_MAX;
+
+               if (!list_empty(&nd -> queue)) 
+               {
+               printk(KERN_INFO "Queue is not empty. Begining SSTF IO \n");
+                       sst = list_entry(nd -> queue.next, struct request, queuelist);
+               begin = list_entry(nd -> queue.prev, struct request, queuelist);
+                                               
+               if (sst == begin) 
+                       {
+                          printk(KERN_INFO "Queue only has one value dispatching now.\n");
+                          printk(KERN_INFO "[1]-%d-(%llu)", nd -> cur_direction, (unsigned long long)blk_rq    _pos(sst));
+                          list_del_init(&sst -> queuelist);
+                          nd -> cur_position = blk_rq_pos(sst) + blk_rq_sectors(sst);
+                          printk(KERN_INFO "Dispatching shortest seek time request \n");
+                          elv_dispatch_sort(q, sst);
+                          return 1;
+                       }
+               
+               list_for_each(tmp_list_head, &nd -> queue) {
+                       ittr = list_entry(tmp_list_head, struct request, queuelist);            
+                       ittr_sect = blk_rq_pos(ittr);
+                       printk(KERN_INFO "The itterated sector is: %llu \n", (unsigned long long)ittr_sect);
+
+                       if (sstf_distance(ittr_sect, nd -> cur_position) < sstf_distance(sst_sect, nd -> cur    _position)) 
+                               {
+                                  if ((nd -> cur_direction == FORWARD) && (ittr_sect > nd -> cur_position))
+                                          {
+                                             sst = ittr;
+                                             sst_sect = ittr_sect;
+                                             printk(KERN_INFO "The new SSTF is: %llu, the direction is forw    ard \n", (unsigned long long)sst_sect);
+                                             printk(KERN_INFO "[+]-%d-(%llu)-{%llu}", nd -> cur_direction,     (unsigned long long)sst_sect, (unsigned long long)sstf_distance(ittr_sect, nd -> cur_position));
+
+                                          } 
+
+                                  else if ((nd -> cur_direction == BACKWARD) && (ittr_sect < nd -> cur_posi    tion))
+                                          {
+                                             sst = ittr;
+                                             sst_sect = ittr_sect;
+                                             printk(KERN_INFO "The new SSTF is: %llu, the direction is back    wards \n", (unsigned long long)sst_sect);
+
+                                             printk(KERN_INFO "[-]-%d-(%llu)-{%llu}", nd -> cur_direction,     (unsigned long long)sst_sect, (unsigned long long)sstf_distance(ittr_sect, nd -> cur_position));
+                                          } 
+                                  else 
+                                          {
+                                             printk(KERN_INFO "There were no request in current direction s    witching direction now.\n");
+                                             printk(KERN_INFO "FLIP");
+                                             nd -> cur_direction = !nd -> cur_direction;
+                                          }
+                               }
+               }
+
+               list_del_init(&sst -> queuelist);
+               nd -> cur_position = sst_sect + blk_rq_sectors(sst);
+               printk(KERN_INFO "Dispatching shortest seek time request \n");
+               elv_dispatch_sort(q, sst);
                return 1;
-       }
-       return 0;
-}
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
-{
-       struct noop_data *nd = q->elevator->elevator_data;
+               } else {
+                       printk(KERN_INFO "[0]-%d", nd -> cur_direction);
+                       if (nd -> cur_direction == FORWARD ) {
+                          nd -> cur_position = POS_MAX;
+                          nd -> cur_direction = !nd -> cur_direction;

-       list_add_tail(&rq->queuelist, &nd->queue);
+                       } else {
+                                  nd -> cur_position = POS_MIN;
+                                  nd -> cur_direction = !nd -> cur_direction;
+                       }
+               }
+
+               printk(KERN_INFO "Nikhil's SSTF I/O Schedulor\n");
+               return 0;
 }
 
-static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+static void sstf_add_request(struct request_queue *q, struct request *rq)
 {
-       struct noop_data *nd = q->elevator->elevator_data;
-
-       if (rq->queuelist.prev == &nd->queue)
-               return NULL;
-       return list_entry(rq->queuelist.prev, struct request, queuelist);
+       struct sstf_data *nd = q -> elevator -> elevator_data;
+       list_add_tail(&rq -> queuelist, &nd -> queue);
 }

-static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+static struct request *sstf_former_request(struct request_queue *q, struct request *rq)
 {
-       struct noop_data *nd = q->elevator->elevator_data;
-
-       if (rq->queuelist.next == &nd->queue)
-               return NULL;
-       return list_entry(rq->queuelist.next, struct request, queuelist);
+       struct sstf_data *nd = q -> elevator -> elevator_data;
+       if (rq -> queuelist.prev == &nd -> queue)
+          return NULL;
+       return list_entry(rq -> queuelist.prev, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
+static struct request *sstf_latter_request(struct request_queue *q, struct request *rq)
 {
-       struct noop_data *nd;
-       struct elevator_queue *eq;
-
-       eq = elevator_alloc(q, e);
-       if (!eq)
-               return -ENOMEM;
-
-       nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
-       if (!nd) {
-               kobject_put(&eq->kobj);
-               return -ENOMEM;
-       }
-       eq->elevator_data = nd;
+       struct sstf_data *nd = q -> elevator -> elevator_data;
+       if (rq -> queuelist.next == &nd -> queue)
+          return NULL;
+       return list_entry(rq -> queuelist.next, struct request, queuelist);
+}

-       INIT_LIST_HEAD(&nd->queue);
+static struct sstf_data *sstf_init_queue(struct request_queue *q)
+{
+       struct sstf_data *nd;
+       nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q -> node);
 
-       spin_lock_irq(q->queue_lock);
-       q->elevator = eq;
-       spin_unlock_irq(q->queue_lock);
-       return 0;
+       if (!nd)
+          return NULL;
+                               
+       INIT_LIST_HEAD(&nd -> queue);
+       nd -> cur_position = POS_MIN;
+       nd -> cur_direction = FORWARD;
+       return nd;
 }

-static void noop_exit_queue(struct elevator_queue *e)
+static void sstf_exit_queue(struct elevator_queue *e)
 {
-       struct noop_data *nd = e->elevator_data;
+       struct sstf_data *nd = e -> elevator_data;
 
-       BUG_ON(!list_empty(&nd->queue));
+       BUG_ON(!list_empty(&nd -> queue));
        kfree(nd);
 }
 
-static struct elevator_type elevator_noop = {
-       .ops = {
-               .elevator_merge_req_fn          = noop_merged_requests,
-               .elevator_dispatch_fn           = noop_dispatch,
-               .elevator_add_req_fn            = noop_add_request,
-               .elevator_former_req_fn         = noop_former_request,
-               .elevator_latter_req_fn         = noop_latter_request,
-               .elevator_init_fn               = noop_init_queue,
-               .elevator_exit_fn               = noop_exit_queue,
+static struct elevator_type elevator_sstf = 
+{
+       .ops = 
+       {
+               .elevator_merge_req_fn          = sstf_merged_requests,
+               .elevator_dispatch_fn           = sstf_dispatch,
+               .elevator_add_req_fn            = sstf_add_request,
+               .elevator_former_req_fn         = sstf_former_request,
+               .elevator_latter_req_fn         = sstf_latter_request,
+               .elevator_init_fn               = sstf_init_queue,
+               .elevator_exit_fn               = sstf_exit_queue,
        },
-       .elevator_name = "noop",
+
+       .elevator_name = "sstf",
        .elevator_owner = THIS_MODULE,
 };

-static int __init noop_init(void)
+static int __init sstf_init(void)
 {
-       return elv_register(&elevator_noop);
+       elv_register(&elevator_sstf);   
+       return 0;
 }
 
-static void __exit noop_exit(void)
+static void __exit sstf_exit(void)
 {
-       elv_unregister(&elevator_noop);
+       elv_unregister(&elevator_sstf);
 }
 
-module_init(noop_init);
-module_exit(noop_exit);
-
+module_init(sstf_init);
+module_exit(sstf_exit);

-MODULE_AUTHOR("Jens Axboe");
+MODULE_AUTHOR("Nikhil Kishore");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+MODULE_DESCRIPTION("SSTF I/O Scheduler");
